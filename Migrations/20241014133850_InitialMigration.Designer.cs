// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealStats.Data;

#nullable disable

namespace RealStats.Migrations
{
    [DbContext(typeof(RealStateContext))]
    [Migration("20241014133850_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProperityTenant", b =>
                {
                    b.Property<int>("ProperityId")
                        .HasColumnType("int");

                    b.Property<int>("TenantsId")
                        .HasColumnType("int");

                    b.HasKey("ProperityId", "TenantsId");

                    b.HasIndex("TenantsId");

                    b.ToTable("ProperityTenant");
                });

            modelBuilder.Entity("RealStats.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProperityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProperityId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("RealStats.Models.LeaseAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LeaseStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProperityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("TerminationClause")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProperityId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeaseAgreement");
                });

            modelBuilder.Entity("RealStats.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("RealStats.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("LeaseAgreementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeaseAgreementId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("RealStats.Models.Properity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<long>("Bathrooms")
                        .HasColumnType("bigint");

                    b.Property<long>("Bedrooms")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Garages")
                        .HasColumnType("bigint");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Properities");
                });

            modelBuilder.Entity("RealStats.Models.ProperityStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProperityStatus");
                });

            modelBuilder.Entity("RealStats.Models.ReportIssue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProperityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProperityId");

                    b.HasIndex("TenantId");

                    b.ToTable("ReportIssues");
                });

            modelBuilder.Entity("RealStats.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("ProperityTenant", b =>
                {
                    b.HasOne("RealStats.Models.Properity", null)
                        .WithMany()
                        .HasForeignKey("ProperityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealStats.Models.Feature", b =>
                {
                    b.HasOne("RealStats.Models.Properity", "Properity")
                        .WithMany("Features")
                        .HasForeignKey("ProperityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Properity");
                });

            modelBuilder.Entity("RealStats.Models.LeaseAgreement", b =>
                {
                    b.HasOne("RealStats.Models.Manager", "Manager")
                        .WithMany("LeaseAgreements")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.Properity", "Properity")
                        .WithMany("LeaseAgreements")
                        .HasForeignKey("ProperityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.Tenant", "Tenant")
                        .WithMany("LeaseAgreement")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Properity");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("RealStats.Models.Payment", b =>
                {
                    b.HasOne("RealStats.Models.LeaseAgreement", "LeaseAgreement")
                        .WithMany("Payments")
                        .HasForeignKey("LeaseAgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaseAgreement");
                });

            modelBuilder.Entity("RealStats.Models.Properity", b =>
                {
                    b.HasOne("RealStats.Models.Manager", "manager")
                        .WithMany("Properities")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("manager");
                });

            modelBuilder.Entity("RealStats.Models.ProperityStatus", b =>
                {
                    b.HasOne("RealStats.Models.Properity", "Properity")
                        .WithOne("ProperityStatus")
                        .HasForeignKey("RealStats.Models.ProperityStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Properity");
                });

            modelBuilder.Entity("RealStats.Models.ReportIssue", b =>
                {
                    b.HasOne("RealStats.Models.Properity", "Properity")
                        .WithMany("ReportIssues")
                        .HasForeignKey("ProperityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.Tenant", "Tenant")
                        .WithMany("ReportIssue")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Properity");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("RealStats.Models.LeaseAgreement", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RealStats.Models.Manager", b =>
                {
                    b.Navigation("LeaseAgreements");

                    b.Navigation("Properities");
                });

            modelBuilder.Entity("RealStats.Models.Properity", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("LeaseAgreements");

                    b.Navigation("ProperityStatus")
                        .IsRequired();

                    b.Navigation("ReportIssues");
                });

            modelBuilder.Entity("RealStats.Models.Tenant", b =>
                {
                    b.Navigation("LeaseAgreement");

                    b.Navigation("ReportIssue");
                });
#pragma warning restore 612, 618
        }
    }
}
