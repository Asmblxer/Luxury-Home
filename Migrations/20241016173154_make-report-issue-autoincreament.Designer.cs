// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealStats.Data;

#nullable disable

namespace RealStats.Migrations
{
    [DbContext(typeof(RealStateContext))]
    [Migration("20241016173154_make-report-issue-autoincreament")]
    partial class makereportissueautoincreament
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FeatureProperity", b =>
                {
                    b.Property<int>("FeaturesId")
                        .HasColumnType("int");

                    b.Property<int>("ProperitiesId")
                        .HasColumnType("int");

                    b.HasKey("FeaturesId", "ProperitiesId");

                    b.HasIndex("ProperitiesId");

                    b.ToTable("FeatureProperity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProperityTenant", b =>
                {
                    b.Property<int>("ProperityId")
                        .HasColumnType("int");

                    b.Property<int>("TenantsId")
                        .HasColumnType("int");

                    b.HasKey("ProperityId", "TenantsId");

                    b.HasIndex("TenantsId");

                    b.ToTable("ProperityTenant");
                });

            modelBuilder.Entity("RealStats.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RealStats.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Laundry Room"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Emergency Exit"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fire Place"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Garden"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Smart Home"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Elevator Access"
                        });
                });

            modelBuilder.Entity("RealStats.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProperityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProperityId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("RealStats.Models.LeaseAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LeaseStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProperityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<double>("TerminationClause")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProperityId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeaseAgreement");
                });

            modelBuilder.Entity("RealStats.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("RealStats.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("LeaseAgreementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeaseAgreementId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("RealStats.Models.Properity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<long>("Bathrooms")
                        .HasColumnType("bigint");

                    b.Property<long>("Bedrooms")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Garages")
                        .HasColumnType("bigint");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Properities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 3000,
                            Bathrooms = 3L,
                            Bedrooms = 4L,
                            City = "Los Angeles",
                            Country = "USA",
                            Description = "A beautiful luxury villa with ocean views.",
                            Garages = 2L,
                            ManagerId = 1,
                            Name = "Luxury Villa",
                            Price = 1500000.0,
                            Street = "123 Sunset Blvd"
                        },
                        new
                        {
                            Id = 2,
                            Area = 1200,
                            Bathrooms = 2L,
                            Bedrooms = 2L,
                            City = "Paris",
                            Country = "France",
                            Description = "A stylish apartment in the heart of Paris.",
                            Garages = 1L,
                            ManagerId = 1,
                            Name = "Modern Apartment",
                            Price = 750000.0,
                            Street = "45 Rue de Rivoli"
                        },
                        new
                        {
                            Id = 3,
                            Area = 800,
                            Bathrooms = 1L,
                            Bedrooms = 2L,
                            City = "London",
                            Country = "UK",
                            Description = "A cozy cottage perfect for a small family.",
                            Garages = 0L,
                            ManagerId = 1,
                            Name = "Cozy Cottage",
                            Price = 400000.0,
                            Street = "10 Downing St"
                        },
                        new
                        {
                            Id = 4,
                            Area = 1500,
                            Bathrooms = 1L,
                            Bedrooms = 1L,
                            City = "New York",
                            Country = "USA",
                            Description = "A spacious loft in downtown New York.",
                            Garages = 0L,
                            ManagerId = 1,
                            Name = "Spacious Loft",
                            Price = 950000.0,
                            Street = "250 W 34th St"
                        },
                        new
                        {
                            Id = 5,
                            Area = 3500,
                            Bathrooms = 4L,
                            Bedrooms = 5L,
                            City = "Sydney",
                            Country = "Australia",
                            Description = "A stunning beach house with direct access to the beach.",
                            Garages = 3L,
                            ManagerId = 1,
                            Name = "Beach House",
                            Price = 2000000.0,
                            Street = "5 Beach Rd"
                        },
                        new
                        {
                            Id = 6,
                            Area = 5000,
                            Bathrooms = 5L,
                            Bedrooms = 6L,
                            City = "Toronto",
                            Country = "Canada",
                            Description = "A beautiful farm with plenty of land.",
                            Garages = 2L,
                            ManagerId = 1,
                            Name = "Country Farm",
                            Price = 1200000.0,
                            Street = "100 Country Rd"
                        },
                        new
                        {
                            Id = 7,
                            Area = 3000,
                            Bathrooms = 3L,
                            Bedrooms = 3L,
                            City = "Miami",
                            Country = "USA",
                            Description = "A luxurious penthouse suite with ocean views.",
                            Garages = 2L,
                            ManagerId = 1,
                            Name = "Penthouse Suite",
                            Price = 2500000.0,
                            Street = "1 Ocean Dr"
                        },
                        new
                        {
                            Id = 8,
                            Area = 2500,
                            Bathrooms = 2L,
                            Bedrooms = 4L,
                            City = "Berlin",
                            Country = "Germany",
                            Description = "A family home located in a quiet neighborhood.",
                            Garages = 1L,
                            ManagerId = 1,
                            Name = "Family Home",
                            Price = 600000.0,
                            Street = "20 Hauptstrasse"
                        },
                        new
                        {
                            Id = 9,
                            Area = 1800,
                            Bathrooms = 1L,
                            Bedrooms = 2L,
                            City = "Barcelona",
                            Country = "Spain",
                            Description = "A trendy loft apartment in the city center.",
                            Garages = 0L,
                            ManagerId = 1,
                            Name = "Loft Apartment",
                            Price = 850000.0,
                            Street = "15 Passeig de Gràcia"
                        },
                        new
                        {
                            Id = 10,
                            Area = 2200,
                            Bathrooms = 2L,
                            Bedrooms = 3L,
                            City = "Rome",
                            Country = "Italy",
                            Description = "A modern home with all the latest amenities.",
                            Garages = 1L,
                            ManagerId = 1,
                            Name = "Modern Home",
                            Price = 950000.0,
                            Street = "50 Via Roma"
                        });
                });

            modelBuilder.Entity("RealStats.Models.ProperityStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProperityStatus");
                });

            modelBuilder.Entity("RealStats.Models.ReportIssue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProperityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ProperityId");

                    b.HasIndex("TenantId");

                    b.ToTable("ReportIssues");
                });

            modelBuilder.Entity("RealStats.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("FeatureProperity", b =>
                {
                    b.HasOne("RealStats.Models.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.Properity", null)
                        .WithMany()
                        .HasForeignKey("ProperitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RealStats.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RealStats.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RealStats.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProperityTenant", b =>
                {
                    b.HasOne("RealStats.Models.Properity", null)
                        .WithMany()
                        .HasForeignKey("ProperityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealStats.Models.Image", b =>
                {
                    b.HasOne("RealStats.Models.Properity", "Properity")
                        .WithMany("Images")
                        .HasForeignKey("ProperityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Properity");
                });

            modelBuilder.Entity("RealStats.Models.LeaseAgreement", b =>
                {
                    b.HasOne("RealStats.Models.Manager", "Manager")
                        .WithMany("LeaseAgreements")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.Properity", "Properity")
                        .WithMany("LeaseAgreements")
                        .HasForeignKey("ProperityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.Tenant", "Tenant")
                        .WithMany("LeaseAgreement")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Properity");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("RealStats.Models.Manager", b =>
                {
                    b.HasOne("RealStats.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealStats.Models.Payment", b =>
                {
                    b.HasOne("RealStats.Models.LeaseAgreement", "LeaseAgreement")
                        .WithMany("Payments")
                        .HasForeignKey("LeaseAgreementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaseAgreement");
                });

            modelBuilder.Entity("RealStats.Models.Properity", b =>
                {
                    b.HasOne("RealStats.Models.Manager", "manager")
                        .WithMany("Properities")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("manager");
                });

            modelBuilder.Entity("RealStats.Models.ProperityStatus", b =>
                {
                    b.HasOne("RealStats.Models.Properity", "Properity")
                        .WithOne("ProperityStatus")
                        .HasForeignKey("RealStats.Models.ProperityStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Properity");
                });

            modelBuilder.Entity("RealStats.Models.ReportIssue", b =>
                {
                    b.HasOne("RealStats.Models.Properity", "Properity")
                        .WithMany("ReportIssues")
                        .HasForeignKey("ProperityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealStats.Models.Tenant", "Tenant")
                        .WithMany("ReportIssue")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Properity");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("RealStats.Models.Tenant", b =>
                {
                    b.HasOne("RealStats.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealStats.Models.LeaseAgreement", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RealStats.Models.Manager", b =>
                {
                    b.Navigation("LeaseAgreements");

                    b.Navigation("Properities");
                });

            modelBuilder.Entity("RealStats.Models.Properity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("LeaseAgreements");

                    b.Navigation("ProperityStatus")
                        .IsRequired();

                    b.Navigation("ReportIssues");
                });

            modelBuilder.Entity("RealStats.Models.Tenant", b =>
                {
                    b.Navigation("LeaseAgreement");

                    b.Navigation("ReportIssue");
                });
#pragma warning restore 612, 618
        }
    }
}
